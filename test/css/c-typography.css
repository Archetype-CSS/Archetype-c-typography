@charset "UTF-8";
/**
 * Test: Archetype/u-text.scss
 *
 */
/**
 * Component Constructor
 *
 * Used to provide a means for overriding default styles without redundant output
 * Allows for the component to be package managed with a tool like bower
 * without being tied to its predefined styles/settings for unit testing
 *
 * Sass v3.3.2 (Maptastic Maple)
 * Compass (v1.0.0.alpha.19)
 *
 * 1. Component Constructor takes arguments, $map, and $key(s)
 * 2. Loop over $map and find properties and values
 * 3. Output 'property: value;'
 * 4. Account for nested maps
 *
 */
/**
 * Deep Get (from Susy2)
 * 
 * Return a value deep in nested maps
 * https://github.com/ericam/susy/blob/master/sass/susy/math/su/_maps.scss
 */
/** 
 * Name Spaced Wrapper for Archetype
 */
/**
 * Colorkit
 *
 */
/**
 * Colorkit
 * 
 */
/**
 * Color Stacks
 *
 * Returns a list of mixed colors at given intervals based on two initial source colors
 * https://github.com/ericam/accoutrement/blob/master/stylesheets/accoutrement/_color.scss
 * 
 * $main: The main color this stack is based on
 * $second: The color to be mixed in at varrying amounts
 * $amounts: Optional list of percentage mix intervals
 */
/**
 * Amounts
 * 
 * used in stack functions to create multiple color variants
 */
/**
 * Color Stack
 * 
 * creates a list (color pallet) of color values based on the following arguments:
 *
 * $main: the color to generate variants from
 * $second: the color to mix with $main to create the variants
 * $amounts: the list of mixture amounts, determines the number of variants
 *
 * Remember: the first value in the stack is the unadjusted color, meaning each 
 * stack includes the color which the stack was derived from. The adjusted colors 
 * in the stack begin at 2.
 */
/**
 * Value Stacks
 *
 * Functions to return a tint/shade/tone stack based on a given color
 * 
 * $color: color to adjust
 * $amounts: optional list of percentage amounts
 */
/**
 * Simple Color Value
 * 
 * Functions to adjust the tint/shade/tone of a single color
 *
 * $color: color to adjust
 * $amount: the percentage amount
 */
/**
 * Gray Scale 
 * 
 * return opapue/alpha gray scale
 */
/**
 * Color-Scheme
 * 
 * mixin to generate harmonious color-scheme variables 
 *
 * $color-relationship: monochromatic, analogous, complementary, split-complementary, triadic, tetradic, quadradic
 * $base-color: the color to initiate the color scheme with
 * $color-angle: the degrees of seperation between colors on the wheel.
 *
 */
/**
 * Color Swatch Generator
 *
 * generates color swatch class names based on a given color list
 * $color-swatches
 *
 * ex:
 * $swatches: color-stack(red, blue, $default-amounts);
 * @include swatch-gen($swatches);
 */
/**
 * Colorkit Color Library
 *
 */
/**
 * Reds
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Red-Oranges
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Oranges
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellow-Orange
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellows
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellow-Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blue-Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blues
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blue-Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Red-Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Browns
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * grays
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Color Scheme Pallet
 *
 * for experimenting with color in the browser
 * 
 * generates monochromatic, complementary, split-complementary, triadic,
 * analogous, double-complementary, tetradic, and quadradic color-schemes along
 * with (six by default) tints, tones, and shades of each color in your scheme.  
 * These colors are given class names automaticly. 
 *
 * Remember: the first value in the $tint-stack, $tone-stack, and $shade-stack
 * lists is the unadjusted color, meaning each stack includes the color which the
 * stack was derived from. The adjusted colors in the stack begin at 2.
 */
/**
 * Color Pallet
 * 
 */
/**
 * Color Scheme
 * 
 * Generate harmonious color scheme based on a single key-color ($base-color)
 * @include color-scheme($base-color, $color-relationship);
 * $base-color: any CSS color value or keyword
 * $color-relationship: monochromatic/complementary/spit-complementary/analogous/triadic/tetradic/quadradic
 * $color-angle: (defaults to 30)
 */
/**
 * Base Pallet
 *
 * use this pallet to easily derive color pallet variables from
 */
/**
 * Color Pallet
 */
/**
 * Brand Colors
 *
 * prefixed with '$brand-' to avoid proper color names for ease of use and to avoid collision with CSS color keywords
 * ex: $brand-blue: deepskyblue; or: $brand-accent: tint($brand-blue, 12%);
 */
/**
 * ex:
 * $brand-blue:;
 * $brand-primary:;
 * $brand-secondary:;
 * $brand-accent:;
 */
/**
 * UI and State Colors
 *
 */
/**
 * Color Pallet
 * 
 */
/**
 * Color Scheme
 * 
 * Generate harmonious color scheme based on a single key-color ($base-color)
 * @include color-scheme($base-color, $color-relationship);
 * $base-color: any CSS color value or keyword
 * $color-relationship: monochromatic/complementary/spit-complementary/analogous/triadic/tetradic/quadradic
 * $color-angle: (defaults to 30)
 */
/**
 * Base Pallet
 *
 * use this pallet to easily derive color pallet variables from
 */
/**
 * Color Pallet
 */
/**
 * Brand Colors
 *
 * prefixed with '$brand-' to avoid proper color names for ease of use and to avoid collision with CSS color keywords
 * ex: $brand-blue: deepskyblue; or: $brand-accent: tint($brand-blue, 12%);
 */
/**
 * ex:
 * $brand-blue:;
 * $brand-primary:;
 * $brand-secondary:;
 * $brand-accent:;
 */
/**
 * UI and State Colors
 *
 */
/**
 * Typography Settings
 *
 * 1. Text selection highlight color
 * 2. Text selection text color
 */
/**
 * Colorkit
 *
 */
/**
 * Colorkit
 * 
 */
/**
 * Color Stacks
 *
 * Returns a list of mixed colors at given intervals based on two initial source colors
 * https://github.com/ericam/accoutrement/blob/master/stylesheets/accoutrement/_color.scss
 * 
 * $main: The main color this stack is based on
 * $second: The color to be mixed in at varrying amounts
 * $amounts: Optional list of percentage mix intervals
 */
/**
 * Amounts
 * 
 * used in stack functions to create multiple color variants
 */
/**
 * Color Stack
 * 
 * creates a list (color pallet) of color values based on the following arguments:
 *
 * $main: the color to generate variants from
 * $second: the color to mix with $main to create the variants
 * $amounts: the list of mixture amounts, determines the number of variants
 *
 * Remember: the first value in the stack is the unadjusted color, meaning each 
 * stack includes the color which the stack was derived from. The adjusted colors 
 * in the stack begin at 2.
 */
/**
 * Value Stacks
 *
 * Functions to return a tint/shade/tone stack based on a given color
 * 
 * $color: color to adjust
 * $amounts: optional list of percentage amounts
 */
/**
 * Simple Color Value
 * 
 * Functions to adjust the tint/shade/tone of a single color
 *
 * $color: color to adjust
 * $amount: the percentage amount
 */
/**
 * Gray Scale 
 * 
 * return opapue/alpha gray scale
 */
/**
 * Color-Scheme
 * 
 * mixin to generate harmonious color-scheme variables 
 *
 * $color-relationship: monochromatic, analogous, complementary, split-complementary, triadic, tetradic, quadradic
 * $base-color: the color to initiate the color scheme with
 * $color-angle: the degrees of seperation between colors on the wheel.
 *
 */
/**
 * Color Swatch Generator
 *
 * generates color swatch class names based on a given color list
 * $color-swatches
 *
 * ex:
 * $swatches: color-stack(red, blue, $default-amounts);
 * @include swatch-gen($swatches);
 */
/**
 * Colorkit Color Library
 *
 */
/**
 * Reds
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Red-Oranges
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Oranges
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellow-Orange
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellows
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellow-Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blue-Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blues
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blue-Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Red-Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Browns
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * grays
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Color Scheme Pallet
 *
 * for experimenting with color in the browser
 * 
 * generates monochromatic, complementary, split-complementary, triadic,
 * analogous, double-complementary, tetradic, and quadradic color-schemes along
 * with (six by default) tints, tones, and shades of each color in your scheme.  
 * These colors are given class names automaticly. 
 *
 * Remember: the first value in the $tint-stack, $tone-stack, and $shade-stack
 * lists is the unadjusted color, meaning each stack includes the color which the
 * stack was derived from. The adjusted colors in the stack begin at 2.
 */
/**
 * Color Pallet
 * 
 */
/**
 * Color Scheme
 * 
 * Generate harmonious color scheme based on a single key-color ($base-color)
 * @include color-scheme($base-color, $color-relationship);
 * $base-color: any CSS color value or keyword
 * $color-relationship: monochromatic/complementary/spit-complementary/analogous/triadic/tetradic/quadradic
 * $color-angle: (defaults to 30)
 */
/**
 * Base Pallet
 *
 * use this pallet to easily derive color pallet variables from
 */
/**
 * Color Pallet
 */
/**
 * Brand Colors
 *
 * prefixed with '$brand-' to avoid proper color names for ease of use and to avoid collision with CSS color keywords
 * ex: $brand-blue: deepskyblue; or: $brand-accent: tint($brand-blue, 12%);
 */
/**
 * ex:
 * $brand-blue:;
 * $brand-primary:;
 * $brand-secondary:;
 * $brand-accent:;
 */
/**
 * UI and State Colors
 *
 */
/**
 * Modular Scale
 * 
 * https://github.com/scottkellum/modular-scale
 * http://thesassway.com/projects/modular-scale
 * http://modularscales.com
 *
 * To set multiple $base-size and/or $ratio values use a space separated list. If
 * you use multiple $base-size values, the starting point of the scale will always
 * be the lowest value in this list.
 *
 * golden 1:1.618 (default)
 * double-octave 1:4 
 * major-twelfth 1:3
 * major-eleventh 3:8 
 * major-tenth 2:5
 * octave 1:2
 * major-seventh 8:15
 * minor-seventh 9:16
 * major-sixth
 * minor-sixth 5:8
 * fifth 2:3
 * augfourth 1:√2
 * fourth 3:4
 * major-third 4:5
 * minor-third 5:6
 * major-second 8:9
 * minor-second 15:16
 *
 * 1. Default to $base-font-size 
 */
/* 1 */
/**
 * Typography Variables
 * 
 * 1. typography styles and variables are scoped. see comment in modules/core/_typography.scss
 * 2. path to web font or icon font used in font-face mixin
 */
/** 
 * Type Scope Namespace: 
 */
/**
 * Main Type Scope
 * 
 * Abstracting typographic element variables to allow for easily adding additional type scopes if needed.
 * Add the additional typography scope styles and variables next to the main type scope styles and variables.
 */
/* 1 */
/**
 * Typography Structure
 *
 * 1. every third meta line will line up with every seoncond baseline
 * 2. every third meta line will line up with every seoncond baseline
 */
/**
 * Typography Skin
 *
 */
/**
 * Typography
 * 
 * typography styles are scoped. 
 * only 'default' type values are those provided by the normalize reset
 * this is done to avoid repeatitive overrides
 * see: http://css-tricks.com/opt-in-typography/  
 */
/**
 * Typography Settings
 *
 * 1. Text selection highlight color
 * 2. Text selection text color
 */
/**
 * Colorkit
 *
 */
/**
 * Colorkit
 * 
 */
/**
 * Color Stacks
 *
 * Returns a list of mixed colors at given intervals based on two initial source colors
 * https://github.com/ericam/accoutrement/blob/master/stylesheets/accoutrement/_color.scss
 * 
 * $main: The main color this stack is based on
 * $second: The color to be mixed in at varrying amounts
 * $amounts: Optional list of percentage mix intervals
 */
/**
 * Amounts
 * 
 * used in stack functions to create multiple color variants
 */
/**
 * Color Stack
 * 
 * creates a list (color pallet) of color values based on the following arguments:
 *
 * $main: the color to generate variants from
 * $second: the color to mix with $main to create the variants
 * $amounts: the list of mixture amounts, determines the number of variants
 *
 * Remember: the first value in the stack is the unadjusted color, meaning each 
 * stack includes the color which the stack was derived from. The adjusted colors 
 * in the stack begin at 2.
 */
/**
 * Value Stacks
 *
 * Functions to return a tint/shade/tone stack based on a given color
 * 
 * $color: color to adjust
 * $amounts: optional list of percentage amounts
 */
/**
 * Simple Color Value
 * 
 * Functions to adjust the tint/shade/tone of a single color
 *
 * $color: color to adjust
 * $amount: the percentage amount
 */
/**
 * Gray Scale 
 * 
 * return opapue/alpha gray scale
 */
/**
 * Color-Scheme
 * 
 * mixin to generate harmonious color-scheme variables 
 *
 * $color-relationship: monochromatic, analogous, complementary, split-complementary, triadic, tetradic, quadradic
 * $base-color: the color to initiate the color scheme with
 * $color-angle: the degrees of seperation between colors on the wheel.
 *
 */
/**
 * Color Swatch Generator
 *
 * generates color swatch class names based on a given color list
 * $color-swatches
 *
 * ex:
 * $swatches: color-stack(red, blue, $default-amounts);
 * @include swatch-gen($swatches);
 */
/**
 * Colorkit Color Library
 *
 */
/**
 * Reds
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Red-Oranges
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Oranges
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellow-Orange
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellows
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Yellow-Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blue-Greens
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blues
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Blue-Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Red-Violets
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Browns
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * grays
 * 
 */
/**
 * Tints
 */
/**
 * Tones
 */
/**
 * Shades
 */
/**
 * Color Scheme Pallet
 *
 * for experimenting with color in the browser
 * 
 * generates monochromatic, complementary, split-complementary, triadic,
 * analogous, double-complementary, tetradic, and quadradic color-schemes along
 * with (six by default) tints, tones, and shades of each color in your scheme.  
 * These colors are given class names automaticly. 
 *
 * Remember: the first value in the $tint-stack, $tone-stack, and $shade-stack
 * lists is the unadjusted color, meaning each stack includes the color which the
 * stack was derived from. The adjusted colors in the stack begin at 2.
 */
/**
 * Color Pallet
 * 
 */
/**
 * Color Scheme
 * 
 * Generate harmonious color scheme based on a single key-color ($base-color)
 * @include color-scheme($base-color, $color-relationship);
 * $base-color: any CSS color value or keyword
 * $color-relationship: monochromatic/complementary/spit-complementary/analogous/triadic/tetradic/quadradic
 * $color-angle: (defaults to 30)
 */
/**
 * Base Pallet
 *
 * use this pallet to easily derive color pallet variables from
 */
/**
 * Color Pallet
 */
/**
 * Brand Colors
 *
 * prefixed with '$brand-' to avoid proper color names for ease of use and to avoid collision with CSS color keywords
 * ex: $brand-blue: deepskyblue; or: $brand-accent: tint($brand-blue, 12%);
 */
/**
 * ex:
 * $brand-blue:;
 * $brand-primary:;
 * $brand-secondary:;
 * $brand-accent:;
 */
/**
 * UI and State Colors
 *
 */
/**
 * Modular Scale
 * 
 * https://github.com/scottkellum/modular-scale
 * http://thesassway.com/projects/modular-scale
 * http://modularscales.com
 *
 * To set multiple $base-size and/or $ratio values use a space separated list. If
 * you use multiple $base-size values, the starting point of the scale will always
 * be the lowest value in this list.
 *
 * golden 1:1.618 (default)
 * double-octave 1:4 
 * major-twelfth 1:3
 * major-eleventh 3:8 
 * major-tenth 2:5
 * octave 1:2
 * major-seventh 8:15
 * minor-seventh 9:16
 * major-sixth
 * minor-sixth 5:8
 * fifth 2:3
 * augfourth 1:√2
 * fourth 3:4
 * major-third 4:5
 * minor-third 5:6
 * major-second 8:9
 * minor-second 15:16
 *
 * 1. Default to $base-font-size 
 */
/* 1 */
/**
 * Typography Variables
 * 
 * 1. typography styles and variables are scoped. see comment in modules/core/_typography.scss
 * 2. path to web font or icon font used in font-face mixin
 */
/** 
 * Type Scope Namespace: 
 */
/**
 * Main Type Scope
 * 
 * Abstracting typographic element variables to allow for easily adding additional type scopes if needed.
 * Add the additional typography scope styles and variables next to the main type scope styles and variables.
 */
/* 1 */
/**
 * Typography Structure
 *
 * 1. every third meta line will line up with every seoncond baseline
 * 2. every third meta line will line up with every seoncond baseline
 */
/**
 * Typography Skin
 *
 */
/**
 * Main Copy Scope 
 */
/* line 19, ../../_c-typography.scss */
.copy {
  /**
   * Font-face & Icon Fonts
   */
  /**
   * Headers
   *
   * 1. Fix the character spacing for headings
   */
  /*h5bp*/
}
/* line 41, ../../_c-typography.scss */
.copy h1, .copy h2, .copy h3, .copy h4, .copy h5, .copy h6 {
  font-weight: bold;
  color: red;
  text-rendering: optimizelegibility;
  /* 1 */
}
/* line 48, ../../_c-typography.scss */
.copy h1 {
  font-size: 11.09017em;
  line-height: 1.08204em;
  margin: 0 auto 2px;
}
/* line 53, ../../_c-typography.scss */
.copy h2 {
  font-size: 6.8541em;
  line-height: 1.09424em;
  margin: 0 auto 3px;
}
/* line 58, ../../_c-typography.scss */
.copy h3 {
  font-size: 4.23607em;
  line-height: 1.06231em;
  margin: 0 auto 5px;
}
/* line 63, ../../_c-typography.scss */
.copy h4 {
  font-size: 2.61803em;
  line-height: 1.1459em;
  margin: 0 auto 9px;
}
/* line 68, ../../_c-typography.scss */
.copy h5 {
  font-size: 1.61803em;
  line-height: 1.8541em;
  margin: 0 auto 14px;
}
/* line 73, ../../_c-typography.scss */
.copy h6 {
  font-size: 1em;
  line-height: 1.5em;
  margin: 0 auto 24px;
}
/* line 78, ../../_c-typography.scss */
.copy .subheader {
  font-weight: normal;
}
/* line 83, ../../_c-typography.scss */
.copy p {
  margin: 0 auto 1.5em;
}
/* line 92, ../../_c-typography.scss */
.copy .lead {
  font-size: 2.61803em;
  line-height: 1.1459em;
  margin: 0 auto 9px;
}
/* line 106, ../../_c-typography.scss */
.copy .muted {
  color: #b3b3b3;
}
/* line 110, ../../_c-typography.scss */
.copy address {
  display: block;
  margin-bottom: 1em;
  line-height: 1;
  font-style: normal;
}
/* line 117, ../../_c-typography.scss */
.copy del {
  color: #999999;
  text-decoration: line-through;
}
/* line 122, ../../_c-typography.scss */
.copy cite {
  font-style: normal;
}
/* line 126, ../../_c-typography.scss */
.copy em,
.copy dfn {
  font-style: italic;
}
/* line 131, ../../_c-typography.scss */
.copy dfn {
  font-weight: bold;
}
/* line 135, ../../_c-typography.scss */
.copy ins {
  background-color: #999999;
  color: #999999;
  text-decoration: none;
}
/* line 142, ../../_c-typography.scss */
.copy mark {
  font-style: italic;
  font-weight: bold;
}

/**
 * example test class
 */
